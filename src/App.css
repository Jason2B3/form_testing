.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
/*
function useInput(initialValue, verifyFN) {
  // Set up stateful variables to hold current value of the input field
  const [value, setValue] = useState(initialValue);
  // Function resets input value to whatever initVal was given as a parameter
  const reset = () => setValue(initialValue); 
  const bind = {
    value,
    onChange: function (e) {
      // Sets stateful "value" variable equal to the event target's value
      setValue(e.target.value);
      verifyFN(e.target.value) //% i added this
    },
  };
  return [value, bind, reset];
}
*/